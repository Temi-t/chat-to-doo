{"version":3,"sources":["Presentational/NewTask.js","Presentational/TasksList.js","App.js","serviceWorker.js","index.js"],"names":["NewTask","newTask","handleChange","handleSubmit","onSubmit","placeholder","autoComplete","name","value","title","onChange","description","type","TasksList","allTasks","handleDelete","handleDone","map","index","id","key","className","onClick","App","useState","setNewTask","setAllTasks","target","prevTask","Date","now","event","preventDefault","prev","taskIdToRemove","filter","task","document","getElementsByClassName","style","cssText","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gPAEe,SAASA,EAAT,GAA2D,IAAxCC,EAAuC,EAAvCA,QAASC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,aACrD,OACI,0BAAMC,SAAUD,GACZ,2BAAOE,YAAY,iBACnBC,aAAa,MACbC,KAAK,QACLC,MAAOP,EAAQQ,OAAS,GACxBC,SAAUR,IAERD,EAAQQ,MACN,oCACI,8BACAJ,YAAY,kBACZE,KAAK,cACLC,MAAOP,EAAQU,aAAe,GAC9BD,SAAUR,IAEV,4BAAQU,KAAK,UAAb,eARU,MCTf,SAASC,EAAT,GAA4D,IAAvCC,EAAsC,EAAtCA,SAAUC,EAA4B,EAA5BA,aAAcC,EAAc,EAAdA,WACxD,OACI,4BACKF,EAASG,KAAI,WAA2BC,GAA3B,IAAET,EAAF,EAAEA,MAAOE,EAAT,EAASA,YAAaQ,EAAtB,EAAsBA,GAAtB,OACN,wBAAIC,IAAKD,EAAID,MAAOA,EAAOG,UAAU,aACjC,6BACI,gCAAOZ,EAAP,KACA,4BAAQY,UAAU,WAAWC,QAAS,kBAAIN,EAAWE,KAArD,QACA,4BAAQI,QAAS,kBAAMP,EAAaI,KAApC,MAEFR,EAAqB,2BAAIA,GAAX,UC4DzBY,MAlEf,WAAgB,IAAD,EAEiBC,mBAAS,IAF1B,mBAENvB,EAFM,KAEGwB,EAFH,OAcmBD,mBAAS,IAd5B,mBAcNV,EAdM,KAcIY,EAdJ,KAiDb,OACE,yBAAKL,UAAU,OACb,yCACA,wCACA,kBAACrB,EAAD,CAASC,QAASA,EAClBC,aAlDiB,SAAC,GAAc,IAAbyB,EAAY,EAAZA,OACdpB,EAAeoB,EAAfpB,KAAMC,EAASmB,EAATnB,MACbiB,GAAW,SAACG,GAAD,mBAAC,eACPA,GADM,gBAETT,GAAIU,KAAKC,OACRvB,EAAOC,QA8CRL,aAxCiB,SAAC4B,GACpBA,EAAMC,iBACF/B,EAAQQ,QACZiB,GAAY,SAACO,GAAD,OAAWhC,GAAX,mBAAuBgC,OACnCR,EAAW,QAsCT,kBAACZ,EAAD,CAAWC,SAAUA,EACrBY,YAAaA,EACbX,aArCiB,SAACmB,GACpBR,GAAY,SAACO,GAAD,OAAUA,EAAKE,QACzB,SAAAC,GAAI,OAAIA,EAAKjB,KAAOe,SAoCpBlB,WAlBe,SAACE,GAClBmB,SAASC,uBAAuB,aAAapB,GAAOqB,MAAMC,QAC5D,kECtCkBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFX,SAASY,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.6077bd91.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function NewTask({ newTask, handleChange, handleSubmit }) {\n    return(\n        <form onSubmit={handleSubmit}>\n            <input placeholder='New Theme here'\n            autoComplete=\"off\"\n            name=\"title\"\n            value={newTask.title || ''}\n            onChange={handleChange} />\n\n            {!newTask.title ? null : (\n                <>\n                    <textarea \n                    placeholder=\"Adding theme...\"\n                    name=\"description\"\n                    value={newTask.description || ''}\n                    onChange={handleChange} />\n\n                    <button type='submit'>Add Theme </button>\n                </>\n            )}\n        </form>\n    );\n};","import React from 'react';\n\nexport default function TasksList({ allTasks, handleDelete, handleDone }) {\n    return(\n        <ul >\n            {allTasks.map(({title, description, id}, index) => (\n                    <li key={id} index={index} className='toDoTitle'>\n                        <div  >\n                            <h2 > {title } </h2>\n                            <button className='done-btn' onClick={()=>handleDone(index)}>Done</button>\n                            <button onClick={() => handleDelete(id)}>X</button>\n                        </div>\n                        {!description ? null : <p>{description}</p>}\n                    </li>\n                ))}\n        </ul>\n        \n\n    );\n};\n\n\n// (index) => {\n//     const newTasks = [...allTasks];\n//     newTasks[index].isCompleted = true;\n//     setAllTasks(newTasks);\n//   }\n\n\n\n\n// <ul>\n//             {allTasks =>(\n//                 allTasks.map(({title, description, id}) => (\n//                     <li key={id}>\n//                         <div>\n//                             <h2>{title}</h2>\n//                             <button onClick={() => handleDelete(id)}>X</button>\n//                         </div>\n//                         {!description ? null : <p>{description}</p>}\n//                         {/* {console.log(description)} */}\n//                     </li>\n//                 ))\n//             )}\n//         </ul>","import React, { useState } from 'react';\nimport './App.css';\nimport NewTask from './Presentational/NewTask';\nimport TasksList from './Presentational/TasksList';\n\n\nfunction App() {\n\n  const [newTask, setNewTask] = useState({});\n\n  const handleChange = ({target}) => {\n    const {name, value} = target;\n    setNewTask((prevTask)=>({\n      ...prevTask,\n      id: Date.now(),\n      [name]: value\n    }));\n  };\n \n\n  const [allTasks, setAllTasks] = useState([]);\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if(!newTask.title)return;\n    setAllTasks((prev) => [newTask, ...prev]);\n    setNewTask({});\n  };\n\n  const handleDelete = (taskIdToRemove) => {\n    setAllTasks((prev) => prev.filter(\n      task => task.id !== taskIdToRemove));\n  };\n\n  \n  // const handleDone = () => {\n  //   document.getElementById('idTitle').style.cssText=\n  //   'text-decoration: line-through; background-color:  #aaff80;'\n  // }\n     \n// const handleDone = () => {\n  // document.getElementByClassName('toDoTitle').classList.add('done')\n// }\n\n  // const handleDone = (index) => {\n  //   const newTasks = [...allTasks];\n  //   newTasks[index].isCompleted = true;\n  //   setAllTasks(newTasks);\n  // }\n  const handleDone = (index) => {\n    document.getElementsByClassName(\"toDoTitle\")[index].style.cssText=\n  'text-decoration: line-through; background-color:  #aaff80;'\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      <h1>TO DO APP</h1>\n      <h1>My tasks</h1>\n      <NewTask newTask={newTask}\n      handleChange={handleChange}\n      handleSubmit={handleSubmit} />\n      \n      <TasksList allTasks={allTasks}\n      setAllTasks={setAllTasks}\n      handleDelete={handleDelete}\n      handleDone={handleDone}\n       />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}